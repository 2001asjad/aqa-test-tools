<!--
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-->
<!-- Tasks list for the XUL launcher.

	 Tasks are a special case of benchmarks, in that they are presented the
	 same way in the launcher, but are just commands to be sequenced in along
	 with real benchmarks. Syntax is the same as benchmarks.xml, however tasks
	 never have setup jobs or multiple iterations.

	 The logic for constructing a task's job is contained within tasks.xsl,
	 which typically will output a preconstructed Axxon job with placeholders.

	 Two types of tasks can be defined: pre and post tasks. These will be
	 sequenced either before or after any of the benchmark jobs are run. The
	 SDK installation (if selected) will always be d\one first.
 -->
<tasks>
	<pre>
		<task name="Restart" variant="default">
			<description>Reboots a server and then reports the uptime.
				This task is OS independent; it will perform the appropriate steps for the selected platform.
				Windows machines will be logged on using 'rdesktop' using a script located on the 'scriptServer' machine.
				zOS machines will do nothing, other than report their uptime, since we do not IPL these regularly.</description>
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="scriptServer">webber</property>
				<property name="rebootDelay">360000</property>
				<property name="winUserId"></property>
				<property name="winPasswd"></property>
			</properties>
		</task>
		<task name="SetLP" variant="default">
			<description>Configures large pages by executing 'setlp' command (machine specific).
				This task requires a 'setlp' script on the target machine (usually in /home/jbench/bin).</description>
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">setlp</property>
				<property name="resultTag">PASSED</property>
			</properties>
		</task>
		<task name="NoLP" variant="default">
			<description>Disables large pages by executing 'nolp' command (machine specific).
				This task requires a 'nolp' script on the target machine (usually in /home/jbench/bin).</description>
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">nolp</property>
				<property name="resultTag">PASSED</property>
			</properties>
		</task>
		<task name="ArchiveBuilds" variant="default">
			<description>This task archives the build in the job to rmedia. Useful for investigations
			There is also an option of "all platforms" which will get all platforms for the current build + date
			.</description>
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="allplatforms">false</property>
				<property name="resultTag">No errors detected in compressed data</property>
			</properties>
		</task>
		<task name="CheckLP" variant="default">
			<description>Checks that large pages can be used by Java.
				This task requires that the 'checklp.sh' script has been installed on the target machine.</description>
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">{perffarm_root}/checklp.sh</property>
				<property name="resultTag">PASSED</property>
			</properties>
		</task>
		<task name="CheckNUMA" variant="default">
			<description>Checks that NUMA parameters on shared systems are consistent with pre-saved expected values.
				This task requires that the 'checknuma.sh' script has been installed on the target machine.
				Currently, this task can only work with AIX and Linux machines.</description>
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">{perffarm_root}/checknuma.sh</property>
				<property name="resultTag">configuration is OK</property>
			</properties>
		</task>
		<task name="Patch_JDK" variant="default">
			<description>Applies a jar file patch to an existing jar file in the JDK.
				The build is expected to be in the standard Espresso layout.</description>
			<capabilities/>
			<properties>
				<property name="sourceJar">patch.jar</property>
				<property name="sourceDir" desc_id="patchjdk_sourcedir">/rmedia/builds/patches/31771</property>
				<property name="destJar" desc_id="patchjdk_destjar">jre/lib/rt.jar</property>
				<property name="patchBaseline" desc_id="patchjdk_base">true</property>
				<property name="patchManifest" desc_id="patchjdk_mf">false</property>
				<property name="resultTag">updating:</property>
			</properties>
		</task>
		<task name="Install_Healthcenter_Agent" variant="default">
			<description>Applies a jar file patch to an existing jar file in the JDK.
				The build is expected to be in the standard Espresso layout.</description>
			<capabilities/>
			<properties>
			</properties>
		</task>
    <task name="Install_AppMetric" variant="default">
            <description>Performs a global npm install under nodesdk.
							The build is expected to be in the standard Espresso layout.</description>
            <capabilities/>
            <properties>
            </properties>
        </task>
		<task name="zOS_ConfigureCPUs" variant="default">
			<description>Issues a zOS command to configure the number of CPUs online.
				The number of CPUs is taken from the 'cpus' restriction listed against the machine.
				This allows multiple aliases to be used to run jobs on a single LPAR against 4, 8 or 16 CPUs.</description>
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">cf_cpu ${/job/server/restrictions/restriction[@name='cpus']}</property>
				<property name="resultTag">PROCESSING COMPLETE</property>
			</properties>
		</task>
		<task name="zWAS_StopRMF" variant="default">
			<description>Stops the RMF monitor on zOS. It is automatically started by zWAS and zLiberty runs when needed.
				This task should be run before zWAS and zLiberty are executed, so that the active RMF log is not too large.</description>
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">{perffarm_root}/zwas_stopRMF.sh</property>
				<property name="resultTag">Shutting down RMF</property>
			</properties>
		</task>
		<task name="Kill_Java" variant="default">
			<description> Kills any java processes running on the system.</description>
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">{STAF/Env/HOME}/bin/kill_java.sh</property>
				<property name="resultTag">All java processes killed</property>
			</properties>
		</task>
		<task name="zWAS_CreateJDK" variant="default">
			<description>Issues commands to create a copy of the current JDK, suitable for running zWAS.
				The new JDK will be suffixed '-ws-sdk'.</description>
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">{perffarm_root}/zwas_automation/scripts/zwas_makejdk.sh {perffarm_root}/sdks ${/job/jvm/product}${/job/jvm/productSuffix}-${/job/jvm/buildID}${/job/jvm/buildIDSuffix} ; {perffarm_root}/zwas_automation/scripts/zos_postinstall.sh {perffarm_root}/sdks/${/job/jvm/product}${/job/jvm/productSuffix}-${/job/jvm/buildID}${/job/jvm/buildIDSuffix}-ws-sdk</property>
				<property name="resultTag">JDK conversion SUCCESSFUL</property>
			</properties>
		</task>
		<task name="SetupJVMforWAS" variant="default">
			<description>Executes a STAX task to copy files from the WAS JDK into the JDK that has been installed from Espresso.
				This is useful if you want to install a JDK and then run WAS manually. Running WAS through the STAX automation will take care of this step for you.
				Note that the WAS version must be configured to match the WAS install that you will be running manually (eg: WAS80, WAS85, WAS855 - as specified in the machine data tool).</description>
			<capabilities/>
			<properties>
				<property name="wasVersion" desc_id="wasVersion">WAS855</property>
				<property name="clearSharedClasses">true</property>
				<property name="resultTag">: Normal</property>
			</properties>
		</task>
		<task name="Reboot" variant="Unix">
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">shutdown -r now</property>
				<property name="rebootDelay">360000</property>
				<property name="resultTag">Done</property>
			</properties>
		</task>
		<task name="Reboot" variant="Windows">
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">shutdown /r /f /d p:1:1 /c "\""Scheduled Pre-benchmark Reboot"\"" /t 0</property>
				<property name="rebootDelay">360000</property>
				<property name="resultTag">Done</property>
			</properties>
		</task>
		<task name="Uptime" variant="default">
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">uptime &amp;&amp; echo Done</property>
				<property name="resultTag">Done</property>
			</properties>
		</task>
		<task name="Logon" variant="Windows">
			<capabilities/>
			<properties>
				<property name="server">webber</property>
				<property name="command">/home/jbench/bin/logon_hamilton</property>
				<property name="resultTag">rdesktop stopped successfully</property>
			</properties>
		</task>
		<task name="Logon" variant="Windows_perez">
			<capabilities/>
			<properties>
				<property name="server">webber</property>
				<property name="command">/home/jbench/bin/logon_perez</property>
				<property name="resultTag">rdesktop stopped successfully</property>
			</properties>
		</task>
		<task name="Logon" variant="Windows_ricciardo">
			<capabilities/>
			<properties>
				<property name="server">webber</property>
				<property name="command">/home/jbench/bin/logon_ricciardo</property>
				<property name="resultTag">rdesktop stopped successfully</property>
			</properties>
		</task>
		<task name="DataRestore" variant="WAS">
			<description>Issues a STAF command to restore the WAS installs on a WAS appserver machine to a pre-saved configuration.</description>
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">{was_restore}</property>
				<property name="resultTag">Restore complete</property>
			</properties>
		</task>
		<task name="StartDB2" variant="Unix">
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">/db2data/db2inst1/db2startup.sh</property>
				<property name="resultTag">DB2 ready to use</property>
			</properties>
		</task>
		<task name="RestartDB2" variant="Unix">
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">restartdb2</property>
				<property name="resultTag">DB2 restore complete.</property>
			</properties>
		</task>
		<task name="CustomSTAFCommand" variant="default">
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">echo Hello World &amp;&amp; echo Done</property>
				<property name="resultTag">Done</property>
			</properties>
		</task>
		<task name="CustomSSHCommand" variant="default">
			<capabilities/>
			<properties>
				<property name="server">${/job/jvm/server}</property>
				<property name="command">echo Hello World &amp;&amp; echo Done</property>
				<property name="resultTag">Done</property>
			</properties>
		</task>
	</pre>
</tasks>
